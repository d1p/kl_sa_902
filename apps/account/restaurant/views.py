from django_filters.rest_framework import DjangoFilterBackend
from rest_framework import mixins
from rest_framework.exceptions import PermissionDenied
from rest_framework.permissions import AllowAny
from rest_framework.viewsets import GenericViewSet, ReadOnlyModelViewSet, ModelViewSet

from apps.account.restaurant.filters import RestaurantTableFilter, RestaurantFilter
from apps.account.restaurant.models import Restaurant, Category, RestaurantTable
from apps.account.restaurant.serializers import (
    CategorySerializer,
    RestaurantSerializer,
    RestaurantTableSerializer,
    PublicRestaurantSerializer,
)
from apps.account.types import ProfileType
from utils.permission import IsAuthenticatedOrCreateOnly, IsRestaurantOrViewOnly


class RestaurantCategoryViewSet(ReadOnlyModelViewSet):
    """
    Return restaurant categories in ascending order.
    """

    permission_classes = [AllowAny]
    serializer_class = CategorySerializer
    queryset = Category.objects.all().order_by("name")


class RestaurantViewSet(
    GenericViewSet,
    mixins.CreateModelMixin,
    mixins.UpdateModelMixin,
    mixins.RetrieveModelMixin,
    mixins.ListModelMixin,
):
    """
    #### Note
    geolocation = { "latitude": Latitude, "longitude": Longitude }
    """

    permission_classes = [IsAuthenticatedOrCreateOnly]
    queryset = Restaurant.objects.filter(is_public=True)

    def get_serializer_class(self):
        if self.request.user.is_superuser:
            return RestaurantSerializer

        if self.action == "list":
            return PublicRestaurantSerializer
        elif self.action in ("create", "update", "destroy"):
            return RestaurantSerializer
        else:
            try:
                instance = self.get_object()
                if instance.user.id != self.request.user.id:
                    return PublicRestaurantSerializer
                else:
                    return RestaurantSerializer
            except AssertionError:
                return PublicRestaurantSerializer

    lookup_field = "user"
    filter_backends = [DjangoFilterBackend]
    filterset_class = RestaurantFilter


class RestaurantTableViewSet(ModelViewSet):
    """
    Returns http 204 No Content upon successful delete
    TABLE QR CODES ARE GENERATED BY BACKGROUND WORKER.
    So after creating a new table, Wait for QR code generation .
    """

    serializer_class = RestaurantTableSerializer
    permission_classes = [IsRestaurantOrViewOnly]
    filter_backends = [DjangoFilterBackend]
    filterset_class = RestaurantTableFilter

    def get_queryset(self):
        if self.action in ["update", "create", "delete"]:
            return RestaurantTable.objects.filter(
                is_active=True, user=self.request.user
            )
        return RestaurantTable.objects.filter(is_active=True)

    def perform_create(self, serializer):
        user = self.request.user
        if user.profile_type != ProfileType.RESTAURANT:
            raise PermissionDenied
        serializer.save(user=user)

    def perform_update(self, serializer):
        instance: RestaurantTable = self.get_object()
        if instance.user.id != self.request.user.id:
            raise PermissionDenied
        serializer.save()

    def perform_destroy(self, instance):
        instance: RestaurantTable = self.get_object()
        if instance.user != self.request.user:
            raise PermissionDenied
        instance.is_active = False
        instance.save()
